""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TODO: Get through all plugins, read docs and customize them.
if has('nvim')
  call plug#begin('~/.local/share/nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

Plug 'Shougo/vinarise.vim'
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'
Plug 'haya14busa/incsearch.vim'
Plug 'itchyny/lightline.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/vim-easy-align'
Plug 'justinmk/vim-sneak'
Plug 'lifepillar/vim-cheat40'
Plug 'mhinz/vim-startify'
Plug 'morhetz/gruvbox'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'wellle/targets.vim'

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'

if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
endif
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" LSP Client Plugin used for C++, Python, etc
Plug 'autozimu/LanguageClient-neovim', {
  \ 'branch': 'next',
  \ 'do': 'bash install.sh',
  \ }
Plug 'Shougo/echodoc.vim'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

if has('nvim')
  " :UpdateRemotePlugins is NeoVim command.
  Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/denite.nvim'
endif

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }

Plug 'lervag/vimtex', { 'for': 'tex' }

Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['cpp', 'c'] }

Plug 'llvm-mirror/llvm', { 'rtp': 'utils/vim', 'for': 'llvm' }

Plug 'Shirk/vim-gas'

Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

Plug 'mattn/emmet-vim'

" IMPORTANT: This has to be the last one.
Plug 'ryanoasis/vim-devicons'

call plug#end()

" Plugin-specific settings

" UltiSnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-l>'
let g:UltiSnipsJumpBackwardTrigger = '<c-h>'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsRemoveSelectModeMappings = 0
let g:UltiSnipsSnippetDirectories=[$HOME.'/.config/UltiSnips']

" lightline.vim
" TODO: Customize lightline more. Ideas:
" * Use full path to the file in lightline.
" * Take a look at example configurations of lightline.
" * Take a look at configurations of powerline, airline, etc.
if has('nvim')
  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  let g:lightline = {
    \ 'colorscheme': 'gruvbox',
    \ 'component_function': {
    \   'filetype': 'LightLineFiletype',
    \   'fileformat': 'LightLineFileformat',
    \   }
    \ }
endif

" Vimtex
let g:vimtex_compiler_latexmk = {'callback' : 0}

" vim-better-whitespace
" Highlight trailing whitespace. This makes missing an extra whitespace
" infinitely harder. Also, use the plugin to remove trailing whitespaces upon
" saving the file.
let g:better_whitespace_enabled = 1
let g:strip_whitespace_on_save = 1
augroup CommentsHighlight
  autocmd!
  highlight ExtraWhitespace ctermbg=DarkMagenta
augroup END

" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" LanguageClient-neovim
let g:LanguageClient_serverCommands = {
  \ 'c': ['clangd'],
  \ 'cpp': ['clangd'],
  \ 'go': ['go-langserver'],
  \ 'haskell': ['hie-wrapper', '--lsp'],
  \ 'javascript': ['javascript-typescript-langserver'],
  \ 'python': ['pyls'],
  \ 'typescript': ['javascript-typescript-langserver'],
  \ }
let g:LanguageClient_serverStderr = '/tmp/LanguageClient.stderr'

" Required for operations modifying multiple buffers like rename.
set hidden

function SetLSPShortcuts()
  nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
  nnoremap <leader>lc :call LanguageClient_textDocument_completion()<CR>
  nnoremap <leader>ld :call LanguageClient_textDocument_definition()<CR>
  nnoremap <leader>lf :call LanguageClient_textDocument_formatting()<CR>
  vnoremap <leader>lf :call LanguageClient_textDocument_rangeFormatting()<CR>
  nnoremap <leader>lh :call LanguageClient_textDocument_hover()<CR>
  nnoremap <leader>ll :call LanguageClient_debugInfo()<CR><Paste>
  nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
  nnoremap <leader>lr :call LanguageClient_textDocument_rename()<CR>
  nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
  nnoremap <leader>lt :call LanguageClient_textDocument_typeDefinition()<CR>
  nnoremap <leader>lx :call LanguageClient_textDocument_references()<CR>
endfunction()

augroup LSP
  autocmd!
  autocmd FileType cpp,c,go,haskell,python,javascript,typescript call SetLSPShortcuts()
augroup END

" Echodoc
set cmdheight=2
let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'signature'

" Deoplete
let g:deoplete#enable_at_startup = 1
" Uprank items from UltiSnips.
call deoplete#custom#source('ultisnips', 'rank', 1000)

" vim-startify
function! StartifyEntryFormat()
  return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction

" NERD commenter
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always use UTF-8 encoding.
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf8

" Use Unix line endings.
set fileformats=unix

" Use smarter indent rules for better experience.
set autoindent
" Enable filetype plugin.
filetype plugin indent on

" Always check spelling to improve grammar and prevent typos.
set spelllang=en_us
set spell

" Gruvbox colorscheme
" TODO: Find a neat way to get around italics being disabled in
" Alacritty (despite being supported) and the strange hack of checking
" $TERM_ITALICS in Gruvbox repo. Probably, some .terminfo should be utilized.
if has('nvim')
  let g:gruvbox_italic = 1
  let g:gruvbox_guisp_fallback = 'bg'
  set background=dark
  colorscheme gruvbox
endif

" Spaces & Tabs
" Always prefer spaces over tabs, use 2 spaces everywhere except in few
" languages.
set tabstop=8
set expandtab
set softtabstop=2
set shiftwidth=2
set shiftround

" Proper backspace behavior.
set backspace=indent,eol,start

augroup Python
  autocmd!
  autocmd FileType python set softtabstop=4| set shiftwidth=4
  autocmd FileType python set colorcolumn=80
augroup END

" Add a vertical line to mark the line width limit so that its not exceeded.
set colorcolumn=81
highlight ColorColumn ctermbg=DarkMagenta guibg=#ED2939

" Show both relative line numbers and the current line number (hybrid mode).
" This way it's easier to move around and do motions.
set number
set relativenumber

" Highlight current line to improve visibility.
set cursorline

if !has('nvim') && !has('termguicolors')
  set t_Co=256
endif
" Use true colors if available (in NeoVim). Set `termguicolors` for that.
if has('termguicolors')
  set termguicolors
  " Use a hack proposed in https://github.com/icymind/NeoSolarized#tmux to make
  " Vim + True Colors + Tmux work better.
  set t_8f=[38;2;%lu;%lu;%lum
  set t_8b=[48;2;%lu;%lu;%lum
endif

" Start scrolling when cursor is few lines off the bound so that a reasonable
" chunk of code around selected line is visible.
set scrolloff=10

" Always show status.
set laststatus=2

" Enable visual autocomplete menu.
set wildmenu

" Only redraw when necessary so that the editor takes less resources.
set lazyredraw

" Redraw faster
set ttyfast

" Highlight matching bracket.
set showmatch

" Enable incremental search.
set incsearch
" Highlight chunks of text matching the search pattern.
set hlsearch
" Search ignores case unless an uppercase letter appears in the pattern.
set ignorecase
set smartcase
" Use magic for regular expressions
set magic

" Don't create backup files.
set noswapfile
set nowritebackup

" Opens signcolumn by default.
set signcolumn=yes

" Always use LaTeX
let g:tex_flavor = 'latex'

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NeoVim specifics
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set NeoVim cursor to the Vim default one, otherwise it shows a blinking thin
" line like in most GUI editors
if has('nvim')
  set guicursor=
endif
